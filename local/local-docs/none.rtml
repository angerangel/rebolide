
backdrop linen 
style p-area area linen middle font-size 14 wrap with [edge/size: 0x0 para/origin: 5x3] 
style pre-area area silver font-size 14 wrap middle with [para/origin: 40x-20] 
style heading h2 490x23 navy 
style sub-heading h3 490x23 water 
origin 0x0 
across 
space 0 
image logo.gif 
document-header: box 450x24 coal green "Documentation" 
origin 40x40 
below 
space 0 heading "1. Overview" p-area 490x102 {The term ""script"" refers not only to single files that are
evaluated but also to ""source"" text embedded within other types of
files (such as, web pages), or ""fragments"" of source text that are
saved as data files or passed as messages.} sub-heading "1.1 File Suffix" p-area 490x88 {REBOL scripts typically append a .r suffix to file names;
however, this convention is not required. The interpreter reads
files with any suffix and scans the contents for a valid REBOL
script header.} sub-heading "1.2 Structure" p-area 490x125 {The structure of a script is free-form. Indentation and spacing
can be used to clarify the structure and content of the script.
In addition, you are encouraged to use the standard scripting
style to make scripts more universally readable. See the <A
href="#_Toc487519762">Style Guide</A> for more information.} heading "2. Headers" p-area 490x134 {<A name=_Toc487519753></A>
Directly preceding the script body, every script
must have a header that identifies its purpose and other script attributes. A
header can contain the script name, author, date, version, file name, and
additional information. REBOL data files that are not intended for direct
evaluation do not require a header.} p-area 490x35 "Headers are useful for several reasons." p-area 490x35 "The general form of a script header is:" pre-area 440x36 "^/r-ebol [block]" p-area 490x86 {For the interpreter to recognize the header, the block must immediately
follow the word "REBOL". Only white space (spaces, tabs, and
lines) is permitted between the word "REBOL" and the block.} p-area 490x63 {The block that follows the "REBOL" word is an object
definition that describes the script. The preferred minimal header is:} pre-area 440x144 {
r-ebol [
    Title:  "Scan Web Sites"
    Date:   2-Feb-2000
    File:   %webscan.r
    Author: "Jane Doer"
    Version: 1.2.3
]} p-area 490x83 {When a script is loaded, the header block is evaluated and its words are set
to their defined values. These values are used by the interpreter and can also
be used by the script itself.} p-area 490x58 {Note that words defined as a single value can also be defined as multiple
values by providing them in a block:} pre-area 440x108 {
r-ebol [
    Title: "Scan Web Sites"
    Date:   12-Nov-1997
    Author: ["Ema User" "Wasa Writer"]
]} p-area 490x148 {Headers can be more complex, providing information about the author,
copyright, formatting, version requirements, revision history, and more. Because
the block is used to construct the header object, it can also be extended with
new information. This means that a script can extend the header as needed, but
it should be done with care to avoid ambiguous or redundant information.} p-area 490x37 "A full header might look something like this:" pre-area 440x648 {
r-ebol [
    Title:   "Full r-ebol Header Example"
    Date:    8-Sep-1999
    Name:    'Full-Header  ; For window title bar

    Version: 1.1.1
    File:    %headfull.r
    Home:    http://www.r-ebol.com/rebex/

    Author:  "Carl Sassenrath"
    Owner:   "r-ebol Headquarters"
    Rights:  "Copyright (C) Carl Sassenrath 1999"

    Needs:   [2.0 ODBC]
    Tabs:    4

    Purpose: {
        The purpose or general reason for the program
        should go here.
    }

    Note: {
        An important comment or notes about the program
        can go here.
    }

    History: [
        0.1.0 [5-Sep-1999 "Created this example" "Carl"]
        0.1.1 [8-Sep-1999 {Moved the header up, changed
            comment on extending the header, added
            advanced user comment.} "Carl"]
    ]

    Language: 'English
]} p-area 490x84 {<A name=_Toc487519754></A>
Script text does not need to begin with a header. Scripts can begin with any
text, allowing them to be inserted into email messages, web pages, and other
files.} p-area 490x86 {The header marks the beginning of the script, and the text that follows is
the body of the script. Text that appears before the header is called the
""preface"" and is ignored during evaluation.} pre-area 440x198 {
The text that appears before the header is ignored
by r-ebol and can be used for comments, email headers,
HTML tags, etc.

r-ebol [
  Title:   "Preface Example"
  Date:    8-Jul-1999
]

print "This file has a preface before the header"} p-area 490x74 {<A name=_Toc487519755></A>
If a script is to be followed by other text unrelated to the script itself,
the script must be enclosed with square brackets [ ]:} pre-area 440x180 {
Here is some text before the script.
[
    r-ebol [
        Title:   "Embedded Example"
        Date:    8-Nov-1997
    ]
    print "done"
]
Here is some text after the script.} p-area 490x47 {Only white space is permitted between the initial bracket and the word
REBOL.} heading "3. Script Arguments" p-area 490x92 {When a script is evaluated, it has access to information about itself. This
is found in the "system/script" object. The object contains the fields
listed in <A
href="#83666">Object Fields</A> for
system/script.} p-area 490x35 "Examples of using the script object are:" pre-area 440x144 {
print system/script/title

print system/script/header/date

do system/script/args

do system/script/path/script.r} p-area 490x60 {The last example evaluates a script called "script".r in the same
directory as the script that is currently running.} sub-heading "3.1 Program Options" p-area 490x100 {Scripts also have access to the options provided to the REBOL
interpreter when it was started. These are found in the
system/options object. The object contains the fields listed in
<A href="#16558">Object Fields</A> for system/options.} p-area 490x56 {The system/options object also contains additional options that were provided
on the command line. Type} pre-area 440x36 "^/probe system/options" p-area 490x37 "to examine the contents of the options object." p-area 490x25 "Examples:" pre-area 440x108 {
print system/options/script

probe system/options/args

print read system/options/home/user.r} heading "4. Running Scripts" p-area 490x63 {There are two ways to run a script: as the initial script when the REBOL
interpreter is started, or from the "do" function.} p-area 490x63 {To run a script when starting the interpreter, provide the script name on the
command line following the REBOL program name:} pre-area 440x36 "^/r-ebol script.r" p-area 490x43 {As soon as the interpreter initializes, the script is evaluated.} p-area 490x65 {From the "do" function, provide the script file name or URL as
an argument. The file is loaded into the interpreter and evaluated:} pre-area 440x72 {
do %script.r

do http://www.r-ebol.com/script.r} p-area 490x48 {The "do" function returns the result of the script when it
finishes evaluation.} p-area 490x42 {Note that the script file must include a valid REBOL header.} sub-heading "4.1 Loading Scripts" p-area 490x121 {Script files can be loaded as data with the "load" function.
This function reads the script and translates the script into values, words, and
blocks, but does not evaluate the script. The result of the
"load" function is a block, unless only a single value was
loaded, then that value is returned.} p-area 490x47 {The script argument to the "load" function is a file name,
URL, or a string.} pre-area 440x90 {
load %script.r
load %datafile.txt
load http://www.r-ebol.org/script.r
load "print now"} p-area 490x38 {The "load" function performs the following steps:} p-area 490x40 {For example, if a script file buy.r contained the text:} pre-area 440x36 "^/Buy 100 shares at $20.00 per share" p-area 490x33 "it could be loaded with the line:" pre-area 440x36 "^/data: load %buy.r" p-area 490x32 "which would result in a block:" pre-area 440x54 "^/probe data^/ [Buy 100 shares at $20.00 per share]" p-area 490x22 {""} p-area 490x80 {It should be noted that the "Buy" example above is a dialect of
REBOL, not directly executable code. See Chapter 4 on Expressions
or Chapter 15 on Parsing for more information.} p-area 490x63 {Note that a file does not require a header to be loaded. The header is
necessary only if the file is to be run as a script.} p-area 490x69 {The "load" function supports a few refinements. The load Function
Refinements lists the refinements and a description of their
functionality:} p-area 490x78 {Normally, "load" does not return the header from the script.
But, if the "/header" refinement is used the returned block
contains the header object as its first argument.} p-area 490x101 {The "/next" refinement loads the next value and returns a
block containing two values. The first returned value is the next value from the
series. The second returned value is the string position immediately following
the last item loaded.} p-area 490x71 {The "/markup" refinement loads HTML and XML data as a block of
tags and strings. All tags are tag data types. All other data are treated as
strings.} p-area 490x43 {If the following file contents where loaded with "load/markup:"} pre-area 440x36 "^/<title> This is an example</title>" p-area 490x30 "a block would be produced:" pre-area 440x54 {
probe data
 [<title>  "This is an example" </title> ]} sub-heading "4.2 Saving Scripts" p-area 490x98 {Data can be saved to a script file in a format that can be loaded into REBOL
with the "load" function. This is a useful way to save data
values and blocks of data. In this fashion, it is possible to create entire
mini-databases.} p-area 490x54 {The "save" function expects two arguments: a file name and
either a block or a value to be saved:} pre-area 440x72 {
data: [Buy 100 shares at $20.00 per share]

save %data.r data} p-area 490x50 {The data is written out in REBOL source text format, which can be loaded
later with:} pre-area 440x36 "^/data: load %data.r" p-area 490x51 {Simple values can also be saved and loaded. For instance, a date stamp can be
saved with:} pre-area 440x36 "^/save %date.r now" p-area 490x30 "and later reloaded with:" pre-area 440x36 "^/stamp: load %date.r" p-area 490x55 {In the previous example, because stamp is a single value, it is not enclosed
in a block when loaded.} p-area 490x59 {To save a script file with a header, the header can be provided in a
refinement as either an object or a block:} pre-area 440x72 {
header: [Title: "This is an example"]

save/header %data.r data header} sub-heading "4.3 Commenting Scripts" p-area 490x111 {Commenting is useful for clarifying the purpose of sections of a script.
Script headers provide a high level description of the script and comments
provide short descriptions of functions. It is also a good idea to provide
comments for other parts of your code as well.} p-area 490x65 {A single-line comment is made with a semicolon. Everything following the
semicolon to the end of the line is part of the comment:} pre-area 440x36 "^/zertplex: 10   ; set to the highest quality" p-area 490x62 {You can also use strings for comments. For instance, you can create
multi-line comments with a string enclosed in braces:} pre-area 440x72 {
{
    This is a long multilined comment.
}} p-area 490x108 {This technique of commenting works only when the string is not
interpreted as an argument to a function. If you want to make sure that
a multi-line comment is recognized as a comment and is not interpreted as code,
precede the string with the word "comment" :} pre-area 440x72 {
comment {
    This is a long multilined comment.
}} p-area 490x108 {The "comment" function tells REBOL to ignore the following
block or string. "Note that string and block comments are actually part of
the script block. Care should be taken to avoid placing them in data blocks,
because they would appear as part of the data."} heading "5. Style Guide" p-area 490x91 {REBOL scripts are free-form. You can write a script using the indenting,
spacing, line length, and line terminators you prefer. You can put each word on
a separate line or join them together on one long line.} p-area 490x96 {While the formatting of your script does not affect the interpreter, it does
affect its human readability. Because of this, REBOL Technologies encourages you
to follow the standard scripting style described in this section.} p-area 490x168 {Of course, you don't have to follow any of these suggestions. However,
scripting style is more important than it first seems. It can make a big
difference in the readability and reuse of scripts. Users may judge the quality
of your scripts by the clarity of their style. Sloppy scripts often mean sloppy
code. Experienced script writers usually find that a clean, consistent style
makes their code easier to produce, maintain, and revise.} sub-heading "5.1 Formatting" p-area 490x45 {Use the following guidelines for formatting REBOL scripts for clarity.} p-area 490x125 {The contents of a block are indented, but the block's enclosing square
brackets [ ] are not. That's because the square brackets belong
to the prior level of syntax, as they define the block but are not contents of
the block. Also, it's easier to spot breaks between adjacent blocks when the
brackets stand out.} p-area 490x100 {Where possible, an opening square bracket remains on the line with its
associated expression. The closing bracket can be followed by more expressions
of that same level. These same rules apply equally to parenthesis (
) and braces { }.} pre-area 440x648 {
if check [do this and that]

if check [
    do this and do that
    do another thing
    do a few more things
]

either check [do something short][
    do something else]

either check [
    when an expression extends
    past the end of a block...
][
    this helps keep things
    straight
]

while [
    do a longer expression
    to see if it's true
][
    the end of the last block
    and start of the new one
    are at the WHILE level
]

adder: func [
    "This is an example function"
    arg1 "this is the first arg"
    arg2 "this is the second arg"
][
    arg1 + arg2
]} p-area 490x57 {An exception is made for expressions that normally belong on a single line,
but extend to multiple lines:} pre-area 440x108 {
if (this is a long conditional expression that
    breaks over a line and is indented
)[
    so this looks a bit odd
]} p-area 490x54 {This also applies to grouped values that belong together, but must be wrapped
to fit on the line:} pre-area 440x144 {
[
    "Hitachi Precision Focus" $1000 10-Jul-1999
        "Computers Are Us"

    "Nuform Natural Keyboard" $70 20-Jul-1999
        "The Keyboard Store"
]} p-area 490x71 {REBOL standard tab size is four spaces. Because people use different editors
and readers for scripts, you can elect to use spaces rather than tabs.} p-area 490x101 {The tab character (ASCII 9) does not indent four spaces in many viewers,
browsers, or shells, so use an editor or REBOL to detab a script before
publishing it to the net. The following function detabs a file with standard
four-space tabs:} pre-area 440x90 {
detab-file: func [file-name [file!]] [
    write file-name detab read file-name
]
detab-file %script.r} p-area 490x45 {The following function converts an eight-space tabs to four-space tabs:} pre-area 440x72 {
detab-file: func [file-name [file!]] [
    write file-name detab entab/size read file-name 8
]} p-area 490x92 {For ease of reading and portability among editors and email readers, limit
lines to 80 characters. Long lines that get wrapped in the wrong places by email
clients are difficult to read and have problems loading.} sub-heading "5.2 Word Names" p-area 490x104 {Words are a user's first exposure to your code, so it is critical to choose
words carefully. A script should be clear and concise. When possible, the words
should relate to their English or other human language equivalent, in a simple,
direct way.} p-area 490x40 {The following are standard naming conventions for REBOL.} p-area 490x36 "Short, crisp words work best where possible:" pre-area 440x36 "^/size  time  send  wait  make  quit" p-area 490x59 {Local words can often be shortened to a single word. Longer, more descriptive
words are better for global words.} p-area 490x55 {What you save when abbreviating a word is rarely worth it. Type date not dt,
or image-file not imgfl.} p-area 490x48 {The standard style is to use hyphens, not character case, to distinguish
words.} pre-area 440x36 "^/group-name image-file  clear-screen  bake-cake" p-area 490x62 {Function names begin with a verb and are followed by a noun, adverb, or
adjective. Some nouns can also be used as verbs.} pre-area 440x54 {
make  print  scan  find  show  hide  take
rake-coals  find-age  clear-screen} p-area 490x47 {Avoid unnecessary words. For instance, quit is just as clear as
quit-system.} p-area 490x92 {When using a noun as a verb, use special characters such as ? where
applicable. For instance, the function for getting the length of a series is
"length?". Other REBOL functions using this naming convention
are:} pre-area 440x36 "^/size?  dir?  time?  modified?" p-area 490x62 {Words for objects or variables that hold data should begin with a noun. They
can include modifiers (adjectives) as needed:} pre-area 440x36 "^/image  sound  big-file  image-files  start-time" p-area 490x55 {There are standard names in REBOL that should be used for similar types of
operations. For instance:} pre-area 440x144 {
make-blub           ;creating something new
free-blub           ;releasing resources of something
copy-blub           ;copying the contents of something
to-blub             ;converting to it
insert-blub         ;inserting something
remove-blub         ;removing something
clear-blub          ;clearing something} sub-heading "5.3 Script Headers" p-area 490x121 {The advantage of using headers is clear. Headers give users a summary of a
script and allow other scripts to process the information (like a cataloging
script). A minimum header provides a title, date, file name and purpose. Other
fields can also be provided such as author, notes, usage, and needs.} pre-area 440x180 {
r-ebol [
    Title: "Local Area Defringer"
    Date:  1-Jun-1957
    File:  %defringe.r
    Purpose: {
        Stabilize the wide area ignition transcriber
        using a double ganged defringing algorithm.
    }
]} sub-heading "5.4 Function Headers" p-area 490x91 {It is useful to provide a description in function specification blocks. Limit
such text to one line of 70 characters or less. Within the description, mention
what type of value the function normally returns.} pre-area 440x180 {
defringe: func [
    "Return the defringed localization radius."
    area "Topo area to defringe"
    time "Time allotted for operation"
    /cost num "Maximum cost permitted"
    /compound "Compound the calculation"
][
    ...code...
]} sub-heading "5.5 Script File Names" p-area 490x82 {The best way to name a file is to think about how you can best find that file
in a few months. Short and clear names are often enough. Plurals should be
avoided, unless meaningful.} p-area 490x75 {In addition, when naming a script, consider how the name will sort in a
directory. For instance, keep related files together by starting them with a
common word.} pre-area 440x72 {
%net-start.r
%net-stop.r
%net-run.r} sub-heading "5.6 Embedded Examples" p-area 490x80 {Where appropriate, provide examples within a script to show how the script
operates and to give users a quick way of verifying that the script works
correctly on their system.} sub-heading "5.7 Embedded Debugging" p-area 490x119 {It is often useful to build in debugging functions as part of the script.
This is especially true of networking and file handling scripts where it is not
desirable to send and write files while running in test mode. Such tests can be
enabled with a control variable at the head of the script.} pre-area 440x54 "^/verbose: on^/check-data: off" sub-heading "5.8 Minimize Globals" p-area 490x107 {In large scripts and where possible, avoid using global variables that carry
their internal state from one module or function to another. For short scripts,
this isn't always practical. But recognize that short scripts may become longer
scripts over time.} p-area 490x61 {If you have a collection of global variables that are closely related,
consider using an object to keep track of them:} pre-area 440x126 {
user: make object! [
    name:  "Fred Dref"
    age:   94
    phone: 707-555-1234
    email: dref@fred.dom
]} heading "6. Script Cleanup" p-area 490x99 {Here is a short script that can be
used to clean up the indentation of a script. It works by parsing the REBOL
syntax and reconstructing each line of the script. This example can be found in
the REBOL Script Library at www.REBOL.com.} pre-area 440x900 {
out: none ; output text
spaced: off ; add extra bracket spacing
indent: "" ; holds indentation tabs

emit-line: func [] [append out newline]

emit-space: func [pos] [
    append out either newline = last out [indent] [
        pick [#" " ""] found? any [
            spaced
            not any [find "[(" last out
                     find ")]" first pos]
        ]
    ]
]

emit: func [from to] [
    emit-space from append out copy/part from to
]

clean-script: func [
    "Returns new script text with standard spacing."
    script "Original Script text"
    /spacey "Optional spaces near brackets/parens"
    /local str new
] [
    spaced: found? spacey
    out: append clear copy script newline
    parse script blk-rule: [
        some [
            str:
            newline (emit-line) |
            #";" [thru newline | to end] new:
                (emit str new) |
            [#"[" | #"("]
                (emit str 1 append indent tab)
                blk-rule |
            [#"]" | #")"]
                (remove indent emit str 1) |
            skip (set [value new]
                load/next str emit str new) :new
        ]
    ]
    remove out ; remove first char
]

script: clean-script read %script.r

write %new-script.r script}